<?php

/**
 * Implements hook_mail().
 *
 * This hook allows Drupal to use your custom mailer for specific email messages.
 *
 * @param string $key
 *   The email key to determine which mailer to use.
 * @param array $message
 *   The email message to be sent.
 * @param array $params
 *   Additional parameters for customizing the email.
 */
function eton_digital_mail(string $key, array &$message, array $params): void {
  // Check if the email key matches the one for your custom mailer.
  if ($key == 'eton_digital_mail') {
    // Set the sender, subject, and body of the email message.
    $message['from'] = $params['from'];
    $message['subject'] = $params['subject'];
    $message['body'] = $params['body'];
  }
}

/**
 * Implements hook_install().
 *
 * This function is called when the module is being installed.
 *
 * @param bool $is_syncing
 *   A boolean indicating whether the module is being installed during synchronization.
 */
function eton_digital_install(bool $is_syncing): void {
  // Check if this is a module synchronization process.
  if ($is_syncing) {
    return;
  }
  // Get the mail system configuration and add your custom mailer.
  $config = \Drupal::configFactory()->getEditable('system.mail');
  $mail_plugins = $config->get('interface');
  // Check if your custom mailer is part of the mail plugins.
  if (in_array('eton_digital', array_keys($mail_plugins))) {
    return;
  }
  // Add your custom mailer to the list of mail plugins.
  $mail_plugins['eton_digital'] = 'eton_digital_mail';
  $config->set('interface', $mail_plugins)->save();
}

/**
 * Implements hook_uninstall().
 *
 * This function is called when the module is being uninstalled.
 *
 * @param bool $is_syncing
 *   A boolean indicating whether the module is being uninstalled during synchronization.
 */
function eton_digital_uninstall(bool $is_syncing): void {
  // Check if this is a module synchronization process.
  if ($is_syncing) {
    return;
  }
  // Get the mail system configuration.
  $config = \Drupal::configFactory()->getEditable('system.mail');
  $mail_plugins = $config->get('interface');
  // Check if your custom mailer is not part of the mail plugins.
  if (!in_array('eton_digital', array_keys($mail_plugins))) {
    return;
  }
  // Remove your custom mailer from the list of mail plugins.
  unset($mail_plugins['eton_digital']);
  $config->set('interface', $mail_plugins)->save();

  // Drop the custom table from the database.
  if (\Drupal::database()->schema()->tableExists('job_applications')) {
    \Drupal::database()->schema()->dropTable('job_applications');
  }
}

/**
 * Implements hook_schema()
 *
 * Defines the database schema for the job_applications table.
 */
function eton_digital_schema(): array {
  $schema = [];

  $schema['job_applications'] = [
    'description' => 'The table that holds job applications',
    'fields' => [
      'id' => [
        'description' => 'The primary identifier.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'name' => [
        'description' => 'Name of applicant.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ],
      'email' => [
        'description' => 'Email of applicant.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ],
      'type' => [
        'description' => 'Type of applicant.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ],
      'technology' => [
        'description' => 'Technology of applicant.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ],
      'message' => [
        'description' => 'Message of applicant.',
        'type' => 'text',
        'size' => 'normal',
      ],
      'submitted' => [
        'description' => 'Time of submission of the applicant.',
        'type' => 'int',
        'not null' => TRUE,
      ],
    ],
    'primary key' => ['id'],
  ];

  return $schema;
}

/**
 * Implements hook_cron().
 *
 * This function runs periodically to process job applications and send emails.
 * It is scheduled to run on Mondays at 08:00.
 */
function eton_digital_cron(): void {
  $current_day = date('l');
  $current_time = date('H:i');
  $today = Drupal::time()->getCurrentTime();
  // Get the timestamp for one week ago.
  $one_week_ago = $today - (7 * 24 * 60 * 60);

  if ($current_day == 'Monday' && $current_time == '08:00') {
    $processed_emails = \Drupal::state()->get('eton_digital_cron_processed_emails', []);

    $query = Drupal::database()->select('job_applications', 'ja');
    $query->fields('ja', ['email']);
    $query->condition('ja.submitted', $one_week_ago, '>');
    $results = $query->execute()->fetchAll();

    // Get the queue service.
    $queue = \Drupal::queue('job_application_mail_sender');

    foreach ($results as $result) {
      $to = $result->email;
      if (!in_array($to, $processed_emails)) {
        // Add email data to the queue for processing.
        $queue->createItem(['email' => $to]);
        $processed_emails[] = $to;
      }
    }

    \Drupal::state()->set('eton_digital_cron_processed_emails', $processed_emails);
  }
}
